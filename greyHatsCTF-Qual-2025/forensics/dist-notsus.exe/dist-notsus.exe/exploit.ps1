# Create known plaintext files and automate bkcrack testing
# Make sure bkcrack.exe and files.zip are in the current directory

# Create directory for known plaintext files
$knownTextDir = "known_plaintexts"
if (!(Test-Path $knownTextDir)) {
    New-Item -ItemType Directory -Path $knownTextDir
}

# Function to create binary file from hex string
function Create-BinaryFile {
    param(
        [string]$hexString,
        [string]$filename
    )
    
    $bytes = @()
    for ($i = 0; $i -lt $hexString.Length; $i += 2) {
        $bytes += [Convert]::ToByte($hexString.Substring($i, 2), 16)
    }
    
    [System.IO.File]::WriteAllBytes((Join-Path $knownTextDir $filename), $bytes)
    Write-Host "Created: $filename" -ForegroundColor Green
}

Write-Host "Creating known plaintext files..." -ForegroundColor Yellow

# 1. Standard PE/MZ headers (most common)
$peHeaders = @{
    "mz_basic.bin" = "4D5A90000300000004000000FFFF0000"
    "mz_extended1.bin" = "4D5A900003000000040000000000FFFF"
    "mz_extended2.bin" = "4D5A500002000000040000000000FFFF"
    "mz_common1.bin" = "4D5A90000300000004000000FFFF0000B800000000000000"
    "mz_common2.bin" = "4D5A400000010000FFFF0000B800000000000000"
    "mz_vs_compiled.bin" = "4D5A90000300000004000000FFFF0000B8000000"
}

# 2. DOS stub variations
$dosStubs = @{
    "dos_stub1.bin" = "4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000"
    "dos_stub2.bin" = "4D5A500002000000040000000000FFFF0000B800000000000000"
    "dos_stub3.bin" = "4D5A800001000000040000000000FFFF0000000000000000"
}

# 3. Modern compiler patterns (Visual Studio, MinGW, etc.)
$compilerPatterns = @{
    "vs2019.bin" = "4D5A90000300000004000000FFFF0000B800000000000000"
    "vs2022.bin" = "4D5A90000300000004000000FFFF0000B800000000000000"
    "mingw.bin" = "4D5A800001000000040000000000FFFF0000000000000000"
    "gcc.bin" = "4D5A640001000000020000000000FFFF0000000000000000"
}

# 4. Specific tool patterns (if notsus.exe is a known tool)
$toolPatterns = @{
    "python_exe.bin" = "4D5A90000300000004000000FFFF0000B800000000000000"
    "go_binary.bin" = "4D5A90000300000004000000FFFF0000B800000000000000"
    "rust_binary.bin" = "4D5A90000300000004000000FFFF0000B800000000000000"
    "dotnet.bin" = "4D5A90000300000004000000FFFF0000B800000000000000"
}

# 5. Just MZ + common variations (12 bytes minimum)
$mzVariations = @{
    "mz_zeros.bin" = "4D5A000000000000000000000000000000000000"
    "mz_pattern1.bin" = "4D5A900003000000040000000000"
    "mz_pattern2.bin" = "4D5A500002000000040000000000"
    "mz_pattern3.bin" = "4D5A400000010000FFFF0000B800"
}

# Combine all patterns
$allPatterns = $peHeaders + $dosStubs + $compilerPatterns + $toolPatterns + $mzVariations

# Create all binary files
foreach ($pattern in $allPatterns.GetEnumerator()) {
    Create-BinaryFile -hexString $pattern.Value -filename $pattern.Key
}

Write-Host "`nRunning bkcrack attacks..." -ForegroundColor Yellow
Write-Host "This may take a while. Press Ctrl+C to stop." -ForegroundColor Red

# Function to run bkcrack and capture results
function Test-BkCrack {
    param(
        [string]$knownTextFile
    )
    
    $fullPath = Join-Path $knownTextDir $knownTextFile
    Write-Host "`n[$(Get-Date -Format 'HH:mm:ss')] Testing: $knownTextFile" -ForegroundColor Cyan
    
    try {
        $result = & .\bkcrack.exe -C .\files.zip -c notsus.exe -p $fullPath 2>&1
        
        if ($LASTEXITCODE -eq 0 -and $result -match "Keys") {
            Write-Host "SUCCESS! Keys found with: $knownTextFile" -ForegroundColor Green
            Write-Host $result -ForegroundColor Green
            
            # Save successful result
            $result | Out-File -FilePath "successful_attack_$knownTextFile.txt"
            return $true
        } else {
            Write-Host "Failed: $knownTextFile" -ForegroundColor Red
            if ($result -match "Invalid") {
                Write-Host "  -> Invalid plaintext/ciphertext match" -ForegroundColor DarkRed
            }
        }
    } catch {
        Write-Host "Error running bkcrack with $knownTextFile`: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    return $false
}

# Test all known plaintext files
$successFound = $false
foreach ($pattern in $allPatterns.GetEnumerator()) {
    if (Test-BkCrack -knownTextFile $pattern.Key) {
        $successFound = $true
        Write-Host "`nATTACK SUCCESSFUL! Check the output above for keys." -ForegroundColor Green
        break
    }
    
    # Small delay to prevent overwhelming the system
    Start-Sleep -Milliseconds 500
}

if (-not $successFound) {
    Write-Host "`nNo successful attacks found with standard patterns." -ForegroundColor Yellow
    Write-Host "You might need to:" -ForegroundColor Yellow
    Write-Host "1. Find the original notsus.exe file" -ForegroundColor Yellow
    Write-Host "2. Try different offset positions in the file" -ForegroundColor Yellow
    Write-Host "3. Use a different approach (like attacking flag.txt.yml if you know its format)" -ForegroundColor Yellow
}

Write-Host "`nScript completed!" -ForegroundColor Green